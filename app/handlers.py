from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import app.keyboards as kb
from app.utils import extract_keywords, is_owner
from app.db import (
    get_all_tags, get_all_types, get_all_plugins, get_total_plugin_count,
    add_plugin, add_tag, add_type, get_plugins_by_tags_and_type
)

router = Router()

# --- FSM ---
class SearchPluginState(StatesGroup):
    waiting_for_query = State()

class AddPluginState(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_link = State()
    waiting_for_type = State()
    waiting_for_tags = State()

class AddTypeTagState(StatesGroup):
    waiting_for_type_name = State()
    waiting_for_tag_name = State()

class ViewPluginsState(StatesGroup):
    viewing = State()


# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô === #

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç!', reply_markup=kb.main)

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('‚ÑπÔ∏è –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞', reply_markup=kb.main)

@router.message(F.text == '–ü–æ–∏—Å–∫ –ø–ª–∞–≥–∏–Ω–æ–≤')
async def search_plugins_handler(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ç–æ—Ä –¥–ª—è FL Studio'",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(SearchPluginState.waiting_for_query)

@router.message(SearchPluginState.waiting_for_query)
async def process_search_query(message: Message, state: FSMContext):
    query = message.text
    plugin_type, tags = extract_keywords(query)

    results = await get_plugins_by_tags_and_type(plugin_type, tags)

    if not results:
        await message.answer("‚ùå –ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=kb.main)
        await state.clear()
        return

    response = "üîé –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:\n\n"
    for name, description, link in results:
        response += f"üìå {name}\n{description}\nüîó {link}\n\n"

    await message.answer(response, reply_markup=kb.main)
    await state.clear()


# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ –ò –ö–û–ú–ê–ù–î–´ –¢–û–õ–¨–ö–û –î–õ–Ø –í–õ–ê–î–ï–õ–¨–¶–ê === #

@router.message(Command('admin'))
async def cmd_admin(message: Message):
    if not is_owner(message.from_user.id):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=kb.main)
        return

    await message.answer("üìò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∞:\n\n"
                         "üîπ /add_type ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø\n"
                         "üîπ /add_tag ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥\n"
                         "üîπ /add_plugin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω\n"
                         "üîπ /list_types ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∏–ø—ã\n"
                         "üîπ /list_tags ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–≥–∏\n"
                         "üîπ /show_plugins ‚Äî —Å–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤\n"
                         "\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                         reply_markup=kb.admin_menu)

@router.message(Command('admin_exit'))
async def cmd_admin_exit(message: Message):
    await message.answer("üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=kb.main)


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ ---
@router.message(Command('add_type'))
async def cmd_add_type(message: Message, state: FSMContext):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤.", reply_markup=kb.admin_menu)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddTypeTagState.waiting_for_type_name)

@router.message(AddTypeTagState.waiting_for_type_name)
async def process_new_type(message: Message, state: FSMContext):
    type_name = message.text.strip()
    await add_type(type_name)
    await message.answer(f"‚úÖ –¢–∏–ø '{type_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_menu)
    await state.clear()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ ---
@router.message(Command('add_tag'))
async def cmd_add_tag(message: Message, state: FSMContext):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤.", reply_markup=kb.admin_menu)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddTypeTagState.waiting_for_tag_name)

@router.message(AddTypeTagState.waiting_for_tag_name)
async def process_new_tag(message: Message, state: FSMContext):
    tag_name = message.text.strip()
    await add_tag(tag_name)
    await message.answer(f"‚úÖ –¢–µ–≥ '{tag_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_menu)
    await state.clear()


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ ---
@router.message(Command('add_plugin'))
async def add_plugin_start(message: Message, state: FSMContext):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤.", reply_markup=kb.admin_menu)
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddPluginState.waiting_for_title)

@router.message(AddPluginState.waiting_for_title)
async def add_plugin_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞:")
    await state.set_state(AddPluginState.waiting_for_description)

@router.message(AddPluginState.waiting_for_description)
async def add_plugin_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
    await state.set_state(AddPluginState.waiting_for_link)

@router.message(AddPluginState.waiting_for_link)
async def add_plugin_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)

    types = await get_all_types()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t[1], callback_data=f"type_{t[0]}")] for t in types
    ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø", callback_data="type_new")]])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞–≥–∏–Ω–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=keyboard)
    await state.set_state(AddPluginState.waiting_for_type)

@router.callback_query(AddPluginState.waiting_for_type)
async def add_plugin_type(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == "type_new":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞:")
        await state.set_state(AddTypeTagState.waiting_for_type_name)
    else:
        type_id = int(data.split('_')[1])
        await state.update_data(type_id=type_id)
        tags = await get_all_tags()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=t[1], callback_data=f"tag_{t[0]}")] for t in tags
        ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥", callback_data="tag_new")]])
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ:", reply_markup=keyboard)
        await state.set_state(AddPluginState.waiting_for_tags)

@router.message(AddTypeTagState.waiting_for_type_name)
async def add_new_type(message: Message, state: FSMContext):
    type_name = message.text
    type_id = await add_type(type_name)
    await state.update_data(type_id=type_id)
    tags = await get_all_tags()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t[1], callback_data=f"tag_{t[0]}")] for t in tags
    ] + [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥", callback_data="tag_new")]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ:", reply_markup=keyboard)
    await state.set_state(AddPluginState.waiting_for_tags)

@router.callback_query(AddPluginState.waiting_for_tags)
async def add_plugin_tags(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == "tag_new":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞:")
        await state.set_state(AddTypeTagState.waiting_for_tag_name)
    else:
        tag_id = int(data.split('_')[1])
        data = await state.get_data()
        tags = data.get("tags", [])
        tags.append(tag_id)
        await state.update_data(tags=tags)
        await callback_query.message.answer("üìå –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done")

@router.message(AddTypeTagState.waiting_for_tag_name)
async def add_new_tag(message: Message, state: FSMContext):
    tag_name = message.text
    tag_id = await add_tag(tag_name)
    data = await state.get_data()
    tags = data.get("tags", [])
    tags.append(tag_id)
    await state.update_data(tags=tags)
    await message.answer("üìå –¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–æ—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done")

@router.message(Command('done'))
async def finish_add_plugin(message: Message, state: FSMContext):
    data = await state.get_data()
    plugin_id = await add_plugin(
        title=data["title"],
        description=data["description"],
        link=data["link"],
        type_id=data["type_id"],
        tag_ids=data.get("tags", [])
    )
    await message.answer(f"üìå –ü–ª–∞–≥–∏–Ω '{data['title']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=kb.admin_menu)
    await state.clear()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–ø–æ–≤ –∏ —Ç–µ–≥–æ–≤ ---
@router.message(Command('list_types'))
async def list_types(message: Message):
    types = await get_all_types()
    text = "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:\n\n" + "\n".join([f"{t[0]}. {t[1]}" for t in types])
    await message.answer(text, reply_markup=kb.admin_menu)

@router.message(Command('list_tags'))
async def list_tags(message: Message):
    tags = await get_all_tags()
    text = "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:\n\n" + "\n".join([f"{t[0]}. {t[1]}" for t in tags])
    await message.answer(text, reply_markup=kb.admin_menu)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ ---
def get_pagination_keyboard(current_page: int, total_pages: int):
    buttons = []

    if current_page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{current_page - 1}"))
    else:
        buttons.append(InlineKeyboardButton(text="üö´", callback_data="no_action"))

    buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="page_info"))

    if current_page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"page_{current_page + 1}"))
    else:
        buttons.append(InlineKeyboardButton(text="üö´", callback_data="no_action"))

    return InlineKeyboardMarkup(inline_keyboard=[buttons])

@router.message(Command('show_plugins'))
async def cmd_show_plugins(message: Message, state: FSMContext):
    if not is_owner(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–≥–∏–Ω–æ–≤.", reply_markup=kb.admin_menu)
        return

    total_plugins = await get_total_plugin_count()
    if total_plugins == 0:
        await message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –ø–ª–∞–≥–∏–Ω–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=kb.admin_menu)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–≥–∏–Ω–æ–≤
    await state.update_data(page=0, total_plugins=total_plugins)

    plugins = await get_all_plugins(limit=5, offset=0)
    text = "üìÅ –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤:\n\n" + "\n".join([f"{p[0]}. {p[1]}" for p in plugins])

    total_pages = (total_plugins + 4) // 5
    keyboard = get_pagination_keyboard(current_page=0, total_pages=total_pages)
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(ViewPluginsState.viewing)

@router.callback_query(ViewPluginsState.viewing)
async def navigate_plugins(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data.startswith("page_"):
        current_page = int(callback_query.data.split("_")[1])
        data = await state.get_data()
        total_plugins = data["total_plugins"]

        plugins = await get_all_plugins(limit=5, offset=current_page * 5)
        text = "üìÅ –°–ø–∏—Å–æ–∫ –ø–ª–∞–≥–∏–Ω–æ–≤:\n\n" + "\n".join([f"{p[0]}. {p[1]}" for p in plugins])

        total_pages = (total_plugins + 4) // 5
        keyboard = get_pagination_keyboard(current_page, total_pages)
        await callback_query.message.edit_text(text, reply_markup=keyboard)
        await state.update_data(page=current_page)